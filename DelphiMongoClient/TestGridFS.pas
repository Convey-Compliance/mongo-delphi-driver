unit TestGridFS;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, MongoDB, MongoBson, GridFS;

type
  // Test methods for class TGridFS
  
  TestTGridFS = class(TTestCase)
  private
    FGridFS: TGridFS;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TeststoreFile;
    procedure TeststoreFile1;
    procedure TeststoreFile2;
    procedure TestremoveFile;
    procedure Teststore;
    procedure Teststore1;
    procedure TestwriterCreate;
    procedure TestwriterCreate1;
    procedure Testfind;
    procedure Testfind1;
  end;
  // Test methods for class TGridfile
  
  TestTGridfile = class(TTestCase)
  private
    FGridfile: TGridfile;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestgetFilename;
    procedure TestgetChunkSize;
    procedure TestgetLength;
    procedure TestgetContentType;
    procedure TestgetUploadDate;
    procedure TestgetMD5;
    procedure TestgetMetadata;
    procedure TestgetChunkCount;
    procedure TestgetDescriptor;
    procedure TestgetChunk;
    procedure TestgetChunks;
    procedure TestRead;
    procedure TestSeek;
  end;
  // Test methods for class TGridfileWriter
  
  TestTGridfileWriter = class(TTestCase)
  private
    FGridfileWriter: TGridfileWriter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestWrite;
    procedure Testfinish;
  end;

implementation

{ TestTGridFS }

procedure TestTGridFS.SetUp;
begin
  FGridFS := TGridFS.Create;
end;

procedure TestTGridFS.TearDown;
begin
  FGridFS.Free;
  FGridFS := nil;
end;

procedure TestTGridFS.TeststoreFile;
var
  ReturnValue: Boolean;
  FileName: string;
begin
  Fail('Not implemented');
  ReturnValue := FGridFS.storeFile(FileName);
  // TODO: Validate method results
end;

procedure TestTGridFS.TeststoreFile1;
var
  ReturnValue: Boolean;
  remoteName: string;
  FileName: string;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridFS.storeFile(FileName, remoteName);
  // TODO: Validate method results
end;

procedure TestTGridFS.TeststoreFile2;
var
  ReturnValue: Boolean;
  contentType: string;
  remoteName: string;
  FileName: string;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridFS.storeFile(FileName, remoteName, contentType);
  // TODO: Validate method results
end;

procedure TestTGridFS.TestremoveFile;
var
  remoteName: string;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  FGridFS.removeFile(remoteName);
  // TODO: Validate method results
end;

procedure TestTGridFS.Teststore;
var
  ReturnValue: Boolean;
  remoteName: string;
  Length: Int64;
  p: Pointer;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridFS.store(p, Length, remoteName);
  // TODO: Validate method results
end;

procedure TestTGridFS.Teststore1;
var
  ReturnValue: Boolean;
  contentType: string;
  remoteName: string;
  Length: Int64;
  p: Pointer;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridFS.store(p, Length, remoteName, contentType);
  // TODO: Validate method results
end;

procedure TestTGridFS.TestwriterCreate;
var
  ReturnValue: TGridfileWriter;
  remoteName: string;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridFS.writerCreate(remoteName);
  // TODO: Validate method results
end;

procedure TestTGridFS.TestwriterCreate1;
var
  ReturnValue: TGridfileWriter;
  contentType: string;
  remoteName: string;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridFS.writerCreate(remoteName, contentType);
  // TODO: Validate method results
end;

procedure TestTGridFS.Testfind;
var
  ReturnValue: TGridfile;
  remoteName: string;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridFS.find(remoteName);
  // TODO: Validate method results
end;

procedure TestTGridFS.Testfind1;
var
  ReturnValue: TGridfile;
  query: IBson;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridFS.find(query);
  // TODO: Validate method results
end;

{ TestTGridfile }

procedure TestTGridfile.SetUp;
begin
  FGridfile := TGridfile.Create;
end;

procedure TestTGridfile.TearDown;
begin
  FGridfile.Free;
  FGridfile := nil;
end;

procedure TestTGridfile.TestgetFilename;
var
  ReturnValue: string;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getFilename;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetChunkSize;
var
  ReturnValue: Integer;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getChunkSize;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetLength;
var
  ReturnValue: Int64;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getLength;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetContentType;
var
  ReturnValue: string;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getContentType;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetUploadDate;
var
  ReturnValue: TDateTime;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getUploadDate;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetMD5;
var
  ReturnValue: string;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getMD5;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetMetadata;
var
  ReturnValue: IBson;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getMetadata;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetChunkCount;
var
  ReturnValue: Integer;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getChunkCount;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetDescriptor;
var
  ReturnValue: IBson;
begin
  Fail('Not implemented');
  ReturnValue := FGridfile.getDescriptor;
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetChunk;
var
  ReturnValue: IBson;
  i: Integer;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridfile.getChunk(i);
  // TODO: Validate method results
end;

procedure TestTGridfile.TestgetChunks;
var
  ReturnValue: IMongoCursor;
  Count: Integer;
  i: Integer;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridfile.getChunks(i, Count);
  // TODO: Validate method results
end;

procedure TestTGridfile.TestRead;
var
  ReturnValue: Int64;
  Length: Int64;
  p: Pointer;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridfile.Read(p, Length);
  // TODO: Validate method results
end;

procedure TestTGridfile.TestSeek;
var
  ReturnValue: Int64;
  offset: Int64;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  ReturnValue := FGridfile.Seek(offset);
  // TODO: Validate method results
end;

{ TestTGridfileWriter }

procedure TestTGridfileWriter.SetUp;
begin
  FGridfileWriter := TGridfileWriter.Create;
end;

procedure TestTGridfileWriter.TearDown;
begin
  FGridfileWriter.Free;
  FGridfileWriter := nil;
end;

procedure TestTGridfileWriter.TestWrite;
var
  Length: Int64;
  p: Pointer;
begin
  Fail('Not implemented');
  // TODO: Setup method call parameters
  FGridfileWriter.Write(p, Length);
  // TODO: Validate method results
end;

procedure TestTGridfileWriter.Testfinish;
var
  ReturnValue: Boolean;
begin
  Fail('Not implemented');
  ReturnValue := FGridfileWriter.finish;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTGridFS.Suite);
  RegisterTest(TestTGridfile.Suite);
  RegisterTest(TestTGridfileWriter.Suite);
end.

